// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tokens.sql

package schema

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const checkTokenIsValid = `-- name: CheckTokenIsValid :one
SELECT EXISTS(SELECT 1 FROM tokens WHERE hash = $1 AND expiry > now())
`

func (q *Queries) CheckTokenIsValid(ctx context.Context, hash []byte) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkTokenIsValid, hash)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUserToken = `-- name: CreateUserToken :one
INSERT INTO tokens(hash , user_id , expiry , scope )
VALUES ( $1 , $2 , $3 , $4 )
RETURNING hash, user_id, expiry, scope
`

type CreateUserTokenParams struct {
	Hash   []byte
	UserID uuid.UUID
	Expiry time.Time
	Scope  string
}

func (q *Queries) CreateUserToken(ctx context.Context, arg CreateUserTokenParams) (Token, error) {
	row := q.db.QueryRowContext(ctx, createUserToken,
		arg.Hash,
		arg.UserID,
		arg.Expiry,
		arg.Scope,
	)
	var i Token
	err := row.Scan(
		&i.Hash,
		&i.UserID,
		&i.Expiry,
		&i.Scope,
	)
	return i, err
}
