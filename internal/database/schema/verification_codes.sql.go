// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: verification_codes.sql

package schema

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const checkCodeValidity = `-- name: CheckCodeValidity :one
SELECT EXISTS(SELECT 1 FROM verification_codes WHERE hash = $1 AND expire > now())
`

func (q *Queries) CheckCodeValidity(ctx context.Context, hash []byte) (bool, error) {
	row := q.db.QueryRow(ctx, checkCodeValidity, hash)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const deleteVerificationCode = `-- name: DeleteVerificationCode :exec
DELETE
FROM verification_codes
WHERE hash = $1
`

func (q *Queries) DeleteVerificationCode(ctx context.Context, hash []byte) error {
	_, err := q.db.Exec(ctx, deleteVerificationCode, hash)
	return err
}

const storeVerificationCode = `-- name: StoreVerificationCode :one
INSERT INTO verification_codes(hash, user_id, expiry, scope)
VALUES ($1, $2, $3, $4)
RETURNING hash, user_id, scope, expiry, created_at
`

type StoreVerificationCodeParams struct {
	Hash   []byte
	UserID uuid.UUID
	Expiry pgtype.Timestamp
	Scope  string
}

func (q *Queries) StoreVerificationCode(ctx context.Context, arg StoreVerificationCodeParams) (VerificationCode, error) {
	row := q.db.QueryRow(ctx, storeVerificationCode,
		arg.Hash,
		arg.UserID,
		arg.Expiry,
		arg.Scope,
	)
	var i VerificationCode
	err := row.Scan(
		&i.Hash,
		&i.UserID,
		&i.Scope,
		&i.Expiry,
		&i.CreatedAt,
	)
	return i, err
}
