// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: exam_questions.sql

package schema

import (
	"context"

	"github.com/google/uuid"
)

const deleteQuestion = `-- name: DeleteQuestion :exec
DELETE
FROM exam_questions
WHERE id = $1
`

func (q *Queries) DeleteQuestion(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteQuestion, id)
	return err
}

const getQuestionById = `-- name: GetQuestionById :one
SELECT id, exam_id, question, answers, type, created_at, updated_at
FROM exam_questions
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetQuestionById(ctx context.Context, id uuid.UUID) (ExamQuestion, error) {
	row := q.db.QueryRow(ctx, getQuestionById, id)
	var i ExamQuestion
	err := row.Scan(
		&i.ID,
		&i.ExamID,
		&i.Question,
		&i.Answers,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateQuestion = `-- name: UpdateQuestion :exec
UPDATE exam_questions
SET question = $1,
    answers  = $2
WHERE id = $3

RETURNING id, exam_id, question, answers, type, created_at, updated_at
`

type UpdateQuestionParams struct {
	Question string
	Answers  []byte
	ID       uuid.UUID
}

func (q *Queries) UpdateQuestion(ctx context.Context, arg UpdateQuestionParams) error {
	_, err := q.db.Exec(ctx, updateQuestion, arg.Question, arg.Answers, arg.ID)
	return err
}
