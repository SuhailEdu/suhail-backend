// Code generated by SQLBoiler 4.16.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Exam is an object representing the database table.
type Exam struct {
	ID               string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID           string      `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Title            string      `boil:"title" json:"title" toml:"title" yaml:"title"`
	Slug             null.String `boil:"slug" json:"slug,omitempty" toml:"slug" yaml:"slug,omitempty"`
	VisibilityStatus string      `boil:"visibility_status" json:"visibility_status" toml:"visibility_status" yaml:"visibility_status"`
	IsAccessable     null.Bool   `boil:"is_accessable" json:"is_accessable,omitempty" toml:"is_accessable" yaml:"is_accessable,omitempty"`
	CreatedAt        time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt        time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *examR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L examL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ExamColumns = struct {
	ID               string
	UserID           string
	Title            string
	Slug             string
	VisibilityStatus string
	IsAccessable     string
	CreatedAt        string
	UpdatedAt        string
}{
	ID:               "id",
	UserID:           "user_id",
	Title:            "title",
	Slug:             "slug",
	VisibilityStatus: "visibility_status",
	IsAccessable:     "is_accessable",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
}

var ExamTableColumns = struct {
	ID               string
	UserID           string
	Title            string
	Slug             string
	VisibilityStatus string
	IsAccessable     string
	CreatedAt        string
	UpdatedAt        string
}{
	ID:               "exams.id",
	UserID:           "exams.user_id",
	Title:            "exams.title",
	Slug:             "exams.slug",
	VisibilityStatus: "exams.visibility_status",
	IsAccessable:     "exams.is_accessable",
	CreatedAt:        "exams.created_at",
	UpdatedAt:        "exams.updated_at",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var ExamWhere = struct {
	ID               whereHelperstring
	UserID           whereHelperstring
	Title            whereHelperstring
	Slug             whereHelpernull_String
	VisibilityStatus whereHelperstring
	IsAccessable     whereHelpernull_Bool
	CreatedAt        whereHelpertime_Time
	UpdatedAt        whereHelpertime_Time
}{
	ID:               whereHelperstring{field: "\"exams\".\"id\""},
	UserID:           whereHelperstring{field: "\"exams\".\"user_id\""},
	Title:            whereHelperstring{field: "\"exams\".\"title\""},
	Slug:             whereHelpernull_String{field: "\"exams\".\"slug\""},
	VisibilityStatus: whereHelperstring{field: "\"exams\".\"visibility_status\""},
	IsAccessable:     whereHelpernull_Bool{field: "\"exams\".\"is_accessable\""},
	CreatedAt:        whereHelpertime_Time{field: "\"exams\".\"created_at\""},
	UpdatedAt:        whereHelpertime_Time{field: "\"exams\".\"updated_at\""},
}

// ExamRels is where relationship names are stored.
var ExamRels = struct {
	ExamParticipants string
	ExamQuestions    string
}{
	ExamParticipants: "ExamParticipants",
	ExamQuestions:    "ExamQuestions",
}

// examR is where relationships are stored.
type examR struct {
	ExamParticipants ExamParticipantSlice `boil:"ExamParticipants" json:"ExamParticipants" toml:"ExamParticipants" yaml:"ExamParticipants"`
	ExamQuestions    ExamQuestionSlice    `boil:"ExamQuestions" json:"ExamQuestions" toml:"ExamQuestions" yaml:"ExamQuestions"`
}

// NewStruct creates a new relationship struct
func (*examR) NewStruct() *examR {
	return &examR{}
}

func (r *examR) GetExamParticipants() ExamParticipantSlice {
	if r == nil {
		return nil
	}
	return r.ExamParticipants
}

func (r *examR) GetExamQuestions() ExamQuestionSlice {
	if r == nil {
		return nil
	}
	return r.ExamQuestions
}

// examL is where Load methods for each relationship are stored.
type examL struct{}

var (
	examAllColumns            = []string{"id", "user_id", "title", "slug", "visibility_status", "is_accessable", "created_at", "updated_at"}
	examColumnsWithoutDefault = []string{"id", "user_id", "title", "visibility_status", "created_at", "updated_at"}
	examColumnsWithDefault    = []string{"slug", "is_accessable"}
	examPrimaryKeyColumns     = []string{"id"}
	examGeneratedColumns      = []string{}
)

type (
	// ExamSlice is an alias for a slice of pointers to Exam.
	// This should almost always be used instead of []Exam.
	ExamSlice []*Exam
	// ExamHook is the signature for custom Exam hook methods
	ExamHook func(context.Context, boil.ContextExecutor, *Exam) error

	examQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	examType                 = reflect.TypeOf(&Exam{})
	examMapping              = queries.MakeStructMapping(examType)
	examPrimaryKeyMapping, _ = queries.BindMapping(examType, examMapping, examPrimaryKeyColumns)
	examInsertCacheMut       sync.RWMutex
	examInsertCache          = make(map[string]insertCache)
	examUpdateCacheMut       sync.RWMutex
	examUpdateCache          = make(map[string]updateCache)
	examUpsertCacheMut       sync.RWMutex
	examUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var examAfterSelectMu sync.Mutex
var examAfterSelectHooks []ExamHook

var examBeforeInsertMu sync.Mutex
var examBeforeInsertHooks []ExamHook
var examAfterInsertMu sync.Mutex
var examAfterInsertHooks []ExamHook

var examBeforeUpdateMu sync.Mutex
var examBeforeUpdateHooks []ExamHook
var examAfterUpdateMu sync.Mutex
var examAfterUpdateHooks []ExamHook

var examBeforeDeleteMu sync.Mutex
var examBeforeDeleteHooks []ExamHook
var examAfterDeleteMu sync.Mutex
var examAfterDeleteHooks []ExamHook

var examBeforeUpsertMu sync.Mutex
var examBeforeUpsertHooks []ExamHook
var examAfterUpsertMu sync.Mutex
var examAfterUpsertHooks []ExamHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Exam) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Exam) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Exam) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Exam) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Exam) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Exam) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Exam) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Exam) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Exam) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddExamHook registers your hook function for all future operations.
func AddExamHook(hookPoint boil.HookPoint, examHook ExamHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		examAfterSelectMu.Lock()
		examAfterSelectHooks = append(examAfterSelectHooks, examHook)
		examAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		examBeforeInsertMu.Lock()
		examBeforeInsertHooks = append(examBeforeInsertHooks, examHook)
		examBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		examAfterInsertMu.Lock()
		examAfterInsertHooks = append(examAfterInsertHooks, examHook)
		examAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		examBeforeUpdateMu.Lock()
		examBeforeUpdateHooks = append(examBeforeUpdateHooks, examHook)
		examBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		examAfterUpdateMu.Lock()
		examAfterUpdateHooks = append(examAfterUpdateHooks, examHook)
		examAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		examBeforeDeleteMu.Lock()
		examBeforeDeleteHooks = append(examBeforeDeleteHooks, examHook)
		examBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		examAfterDeleteMu.Lock()
		examAfterDeleteHooks = append(examAfterDeleteHooks, examHook)
		examAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		examBeforeUpsertMu.Lock()
		examBeforeUpsertHooks = append(examBeforeUpsertHooks, examHook)
		examBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		examAfterUpsertMu.Lock()
		examAfterUpsertHooks = append(examAfterUpsertHooks, examHook)
		examAfterUpsertMu.Unlock()
	}
}

// OneG returns a single exam record from the query using the global executor.
func (q examQuery) OneG(ctx context.Context) (*Exam, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single exam record from the query.
func (q examQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Exam, error) {
	o := &Exam{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for exams")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Exam records from the query using the global executor.
func (q examQuery) AllG(ctx context.Context) (ExamSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Exam records from the query.
func (q examQuery) All(ctx context.Context, exec boil.ContextExecutor) (ExamSlice, error) {
	var o []*Exam

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Exam slice")
	}

	if len(examAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Exam records in the query using the global executor
func (q examQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Exam records in the query.
func (q examQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count exams rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q examQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q examQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if exams exists")
	}

	return count > 0, nil
}

// ExamParticipants retrieves all the exam_participant's ExamParticipants with an executor.
func (o *Exam) ExamParticipants(mods ...qm.QueryMod) examParticipantQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"exam_participants\".\"exam_id\"=?", o.ID),
	)

	return ExamParticipants(queryMods...)
}

// ExamQuestions retrieves all the exam_question's ExamQuestions with an executor.
func (o *Exam) ExamQuestions(mods ...qm.QueryMod) examQuestionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"exam_questions\".\"exam_id\"=?", o.ID),
	)

	return ExamQuestions(queryMods...)
}

// LoadExamParticipants allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (examL) LoadExamParticipants(ctx context.Context, e boil.ContextExecutor, singular bool, maybeExam interface{}, mods queries.Applicator) error {
	var slice []*Exam
	var object *Exam

	if singular {
		var ok bool
		object, ok = maybeExam.(*Exam)
		if !ok {
			object = new(Exam)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeExam)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeExam))
			}
		}
	} else {
		s, ok := maybeExam.(*[]*Exam)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeExam)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeExam))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &examR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &examR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`exam_participants`),
		qm.WhereIn(`exam_participants.exam_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load exam_participants")
	}

	var resultSlice []*ExamParticipant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice exam_participants")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on exam_participants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for exam_participants")
	}

	if len(examParticipantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ExamParticipants = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &examParticipantR{}
			}
			foreign.R.Exam = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ExamID {
				local.R.ExamParticipants = append(local.R.ExamParticipants, foreign)
				if foreign.R == nil {
					foreign.R = &examParticipantR{}
				}
				foreign.R.Exam = local
				break
			}
		}
	}

	return nil
}

// LoadExamQuestions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (examL) LoadExamQuestions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeExam interface{}, mods queries.Applicator) error {
	var slice []*Exam
	var object *Exam

	if singular {
		var ok bool
		object, ok = maybeExam.(*Exam)
		if !ok {
			object = new(Exam)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeExam)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeExam))
			}
		}
	} else {
		s, ok := maybeExam.(*[]*Exam)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeExam)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeExam))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &examR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &examR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`exam_questions`),
		qm.WhereIn(`exam_questions.exam_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load exam_questions")
	}

	var resultSlice []*ExamQuestion
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice exam_questions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on exam_questions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for exam_questions")
	}

	if len(examQuestionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ExamQuestions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &examQuestionR{}
			}
			foreign.R.Exam = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ExamID {
				local.R.ExamQuestions = append(local.R.ExamQuestions, foreign)
				if foreign.R == nil {
					foreign.R = &examQuestionR{}
				}
				foreign.R.Exam = local
				break
			}
		}
	}

	return nil
}

// AddExamParticipantsG adds the given related objects to the existing relationships
// of the exam, optionally inserting them as new records.
// Appends related to o.R.ExamParticipants.
// Sets related.R.Exam appropriately.
// Uses the global database handle.
func (o *Exam) AddExamParticipantsG(ctx context.Context, insert bool, related ...*ExamParticipant) error {
	return o.AddExamParticipants(ctx, boil.GetContextDB(), insert, related...)
}

// AddExamParticipants adds the given related objects to the existing relationships
// of the exam, optionally inserting them as new records.
// Appends related to o.R.ExamParticipants.
// Sets related.R.Exam appropriately.
func (o *Exam) AddExamParticipants(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ExamParticipant) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ExamID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"exam_participants\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"exam_id"}),
				strmangle.WhereClause("\"", "\"", 2, examParticipantPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.UserID, rel.ExamID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ExamID = o.ID
		}
	}

	if o.R == nil {
		o.R = &examR{
			ExamParticipants: related,
		}
	} else {
		o.R.ExamParticipants = append(o.R.ExamParticipants, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &examParticipantR{
				Exam: o,
			}
		} else {
			rel.R.Exam = o
		}
	}
	return nil
}

// AddExamQuestionsG adds the given related objects to the existing relationships
// of the exam, optionally inserting them as new records.
// Appends related to o.R.ExamQuestions.
// Sets related.R.Exam appropriately.
// Uses the global database handle.
func (o *Exam) AddExamQuestionsG(ctx context.Context, insert bool, related ...*ExamQuestion) error {
	return o.AddExamQuestions(ctx, boil.GetContextDB(), insert, related...)
}

// AddExamQuestions adds the given related objects to the existing relationships
// of the exam, optionally inserting them as new records.
// Appends related to o.R.ExamQuestions.
// Sets related.R.Exam appropriately.
func (o *Exam) AddExamQuestions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ExamQuestion) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ExamID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"exam_questions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"exam_id"}),
				strmangle.WhereClause("\"", "\"", 2, examQuestionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ExamID = o.ID
		}
	}

	if o.R == nil {
		o.R = &examR{
			ExamQuestions: related,
		}
	} else {
		o.R.ExamQuestions = append(o.R.ExamQuestions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &examQuestionR{
				Exam: o,
			}
		} else {
			rel.R.Exam = o
		}
	}
	return nil
}

// Exams retrieves all the records using an executor.
func Exams(mods ...qm.QueryMod) examQuery {
	mods = append(mods, qm.From("\"exams\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"exams\".*"})
	}

	return examQuery{q}
}

// FindExamG retrieves a single record by ID.
func FindExamG(ctx context.Context, iD string, selectCols ...string) (*Exam, error) {
	return FindExam(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindExam retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindExam(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Exam, error) {
	examObj := &Exam{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"exams\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, examObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from exams")
	}

	if err = examObj.doAfterSelectHooks(ctx, exec); err != nil {
		return examObj, err
	}

	return examObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Exam) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Exam) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no exams provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(examColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	examInsertCacheMut.RLock()
	cache, cached := examInsertCache[key]
	examInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			examAllColumns,
			examColumnsWithDefault,
			examColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(examType, examMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(examType, examMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"exams\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"exams\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into exams")
	}

	if !cached {
		examInsertCacheMut.Lock()
		examInsertCache[key] = cache
		examInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Exam record using the global executor.
// See Update for more documentation.
func (o *Exam) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Exam.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Exam) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	examUpdateCacheMut.RLock()
	cache, cached := examUpdateCache[key]
	examUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			examAllColumns,
			examPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update exams, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"exams\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, examPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(examType, examMapping, append(wl, examPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update exams row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for exams")
	}

	if !cached {
		examUpdateCacheMut.Lock()
		examUpdateCache[key] = cache
		examUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q examQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q examQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for exams")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for exams")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ExamSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ExamSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), examPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"exams\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, examPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in exam slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all exam")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Exam) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Exam) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no exams provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(examColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	examUpsertCacheMut.RLock()
	cache, cached := examUpsertCache[key]
	examUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			examAllColumns,
			examColumnsWithDefault,
			examColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			examAllColumns,
			examPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert exams, could not build update column list")
		}

		ret := strmangle.SetComplement(examAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(examPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert exams, could not build conflict column list")
			}

			conflict = make([]string, len(examPrimaryKeyColumns))
			copy(conflict, examPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"exams\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(examType, examMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(examType, examMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert exams")
	}

	if !cached {
		examUpsertCacheMut.Lock()
		examUpsertCache[key] = cache
		examUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Exam record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Exam) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Exam record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Exam) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Exam provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), examPrimaryKeyMapping)
	sql := "DELETE FROM \"exams\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from exams")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for exams")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q examQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q examQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no examQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from exams")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for exams")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ExamSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ExamSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(examBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), examPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"exams\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, examPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from exam slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for exams")
	}

	if len(examAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Exam) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Exam provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Exam) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindExam(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ExamSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty ExamSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ExamSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ExamSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), examPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"exams\".* FROM \"exams\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, examPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ExamSlice")
	}

	*o = slice

	return nil
}

// ExamExistsG checks if the Exam row exists.
func ExamExistsG(ctx context.Context, iD string) (bool, error) {
	return ExamExists(ctx, boil.GetContextDB(), iD)
}

// ExamExists checks if the Exam row exists.
func ExamExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"exams\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if exams exists")
	}

	return exists, nil
}

// Exists checks if the Exam row exists.
func (o *Exam) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ExamExists(ctx, exec, o.ID)
}

// /////////////////////////////// BEGIN EXTENSIONS /////////////////////////////////
// Expose table columns
var (
	ExamAllColumns            = examAllColumns
	ExamColumnsWithoutDefault = examColumnsWithoutDefault
	ExamColumnsWithDefault    = examColumnsWithDefault
	ExamPrimaryKeyColumns     = examPrimaryKeyColumns
	ExamGeneratedColumns      = examGeneratedColumns
)

// GetID get ID from model object
func (o *Exam) GetID() string {
	return o.ID
}

// GetIDs extract IDs from model objects
func (s ExamSlice) GetIDs() []string {
	result := make([]string, len(s))
	for i := range s {
		result[i] = s[i].ID
	}
	return result
}

// GetIntfIDs extract IDs from model objects as interface slice
func (s ExamSlice) GetIntfIDs() []interface{} {
	result := make([]interface{}, len(s))
	for i := range s {
		result[i] = s[i].ID
	}
	return result
}

// ToIDMap convert a slice of model objects to a map with ID as key
func (s ExamSlice) ToIDMap() map[string]*Exam {
	result := make(map[string]*Exam, len(s))
	for _, o := range s {
		result[o.ID] = o
	}
	return result
}

// ToUniqueItems construct a slice of unique items from the given slice
func (s ExamSlice) ToUniqueItems() ExamSlice {
	result := make(ExamSlice, 0, len(s))
	mapChk := make(map[string]struct{}, len(s))
	for i := len(s) - 1; i >= 0; i-- {
		o := s[i]
		if _, ok := mapChk[o.ID]; !ok {
			mapChk[o.ID] = struct{}{}
			result = append(result, o)
		}
	}
	return result
}

// FindItemByID find item by ID in the slice
func (s ExamSlice) FindItemByID(id string) *Exam {
	for _, o := range s {
		if o.ID == id {
			return o
		}
	}
	return nil
}

// FindMissingItemIDs find all item IDs that are not in the list
// NOTE: the input ID slice should contain unique values
func (s ExamSlice) FindMissingItemIDs(expectedIDs []string) []string {
	if len(s) == 0 {
		return expectedIDs
	}
	result := []string{}
	mapChk := s.ToIDMap()
	for _, id := range expectedIDs {
		if _, ok := mapChk[id]; !ok {
			result = append(result, id)
		}
	}
	return result
}

// InsertAll inserts all rows with the specified column values, using an executor.
// IMPORTANT: this will calculate the widest columns from all items in the slice, be careful if you want to use default column values
func (o ExamSlice) InsertAll(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	// Calculate the widest columns from all rows need to insert
	wlCols := make(map[string]struct{}, 10)
	for _, row := range o {
		wl, _ := columns.InsertColumnSet(
			examAllColumns,
			examColumnsWithDefault,
			examColumnsWithoutDefault,
			queries.NonZeroDefaultSet(examColumnsWithDefault, row),
		)
		for _, col := range wl {
			wlCols[col] = struct{}{}
		}
	}
	wl := make([]string, 0, len(wlCols))
	for _, col := range examAllColumns {
		if _, ok := wlCols[col]; ok {
			wl = append(wl, col)
		}
	}

	var sql string
	vals := []interface{}{}
	for i, row := range o {
		if !boil.TimestampsAreSkipped(ctx) {
			currTime := time.Now().In(boil.GetLocation())
			if row.CreatedAt.IsZero() {
				row.CreatedAt = currTime
			}
			if row.UpdatedAt.IsZero() {
				row.UpdatedAt = currTime
			}
		}

		if err := row.doBeforeInsertHooks(ctx, exec); err != nil {
			return 0, err
		}

		if i == 0 {
			sql = "INSERT INTO \"exams\" " + "(\"" + strings.Join(wl, "\",\"") + "\")" + " VALUES "
		}
		sql += strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), len(vals)+1, len(wl))
		if i != len(o)-1 {
			sql += ","
		}
		valMapping, err := queries.BindMapping(examType, examMapping, wl)
		if err != nil {
			return 0, err
		}

		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valMapping)...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, vals)
	}

	result, err := exec.ExecContext(ctx, sql, vals...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to insert all from exam slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by insertall for exams")
	}

	if len(examAfterInsertHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterInsertHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// InsertIgnoreAll inserts all rows with ignoring the existing ones having the same primary key values.
// NOTE: This function calls UpsertAll() with updateOnConflict=false and conflictColumns=<primary key columns>
// IMPORTANT: this will calculate the widest columns from all items in the slice, be careful if you want to use default column values
// IMPORTANT: if the table has `id` column of auto-increment type, this may not work as expected
func (o ExamSlice) InsertIgnoreAll(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	return o.UpsertAll(ctx, exec, false, examPrimaryKeyColumns, boil.None(), columns)
}

// UpsertAll inserts or updates all rows
// Currently it doesn't support "NoContext" and "NoRowsAffected"
// IMPORTANT: this will calculate the widest columns from all items in the slice, be careful if you want to use default column values
// IMPORTANT: if the table has `id` column of auto-increment type, this may not work as expected
func (o ExamSlice) UpsertAll(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	// Calculate the widest columns from all rows need to upsert
	insertCols := make(map[string]struct{}, 10)
	for _, row := range o {
		insert, _ := insertColumns.InsertColumnSet(
			examAllColumns,
			examColumnsWithDefault,
			examColumnsWithoutDefault,
			queries.NonZeroDefaultSet(examColumnsWithDefault, row),
		)
		for _, col := range insert {
			insertCols[col] = struct{}{}
		}
	}
	insert := make([]string, 0, len(insertCols))
	for _, col := range examAllColumns {
		if _, ok := insertCols[col]; ok {
			insert = append(insert, col)
		}
	}

	update := updateColumns.UpdateColumnSet(
		examAllColumns,
		examPrimaryKeyColumns,
	)

	if updateOnConflict && len(update) == 0 {
		return 0, errors.New("models: unable to upsert exams, could not build update column list")
	}

	conflict := conflictColumns
	if len(conflict) == 0 {
		conflict = make([]string, len(examPrimaryKeyColumns))
		copy(conflict, examPrimaryKeyColumns)
	}

	buf := strmangle.GetBuffer()
	defer strmangle.PutBuffer(buf)

	columns := "DEFAULT VALUES"
	if len(insert) != 0 {
		columns = fmt.Sprintf("(%s) VALUES %s",
			strings.Join(insert, ", "),
			strmangle.Placeholders(dialect.UseIndexPlaceholders, len(insert)*len(o), 1, len(insert)),
		)
	}

	fmt.Fprintf(
		buf,
		"INSERT INTO %s %s ON CONFLICT ",
		"\"exams\"",
		columns,
	)

	if !updateOnConflict || len(update) == 0 {
		buf.WriteString("DO NOTHING")
	} else {
		buf.WriteByte('(')
		buf.WriteString(strings.Join(conflict, ", "))
		buf.WriteString(") DO UPDATE SET ")

		for i, v := range update {
			if i != 0 {
				buf.WriteByte(',')
			}
			quoted := strmangle.IdentQuote(dialect.LQ, dialect.RQ, v)
			buf.WriteString(quoted)
			buf.WriteString(" = EXCLUDED.")
			buf.WriteString(quoted)
		}
	}

	query := buf.String()
	valueMapping, err := queries.BindMapping(examType, examMapping, insert)
	if err != nil {
		return 0, err
	}

	var vals []interface{}
	for _, row := range o {
		if !boil.TimestampsAreSkipped(ctx) {
			currTime := time.Now().In(boil.GetLocation())
			if row.CreatedAt.IsZero() {
				row.CreatedAt = currTime
			}

			row.UpdatedAt = currTime
		}

		if err := row.doBeforeUpsertHooks(ctx, exec); err != nil {
			return 0, err
		}

		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valueMapping)...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, vals)
	}

	result, err := exec.ExecContext(ctx, query, vals...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to upsert for exams")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by upsert for exams")
	}

	if len(examAfterUpsertHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterUpsertHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// DeleteAllByPage delete all Exam records from the slice.
// This function deletes data by pages to avoid exceeding Postgres limitation (max parameters: 65535)
func (s ExamSlice) DeleteAllByPage(ctx context.Context, exec boil.ContextExecutor, limits ...int) (int64, error) {
	length := len(s)
	if length == 0 {
		return 0, nil
	}

	// max number of parameters = 65535
	chunkSize := DefaultPageSize
	if len(limits) > 0 && limits[0] > 0 && limits[0] <= MaxPageSize {
		chunkSize = limits[0]
	}
	if length <= chunkSize {
		return s.DeleteAll(ctx, exec)
	}

	rowsAffected := int64(0)
	start := 0
	for {
		end := start + chunkSize
		if end > length {
			end = length
		}
		rows, err := s[start:end].DeleteAll(ctx, exec)
		if err != nil {
			return rowsAffected, err
		}

		rowsAffected += rows
		start = end
		if start >= length {
			break
		}
	}
	return rowsAffected, nil
}

// UpdateAllByPage update all Exam records from the slice.
// This function updates data by pages to avoid exceeding Postgres limitation (max parameters: 65535)
func (s ExamSlice) UpdateAllByPage(ctx context.Context, exec boil.ContextExecutor, cols M, limits ...int) (int64, error) {
	length := len(s)
	if length == 0 {
		return 0, nil
	}

	// max number of parameters = 65535
	// NOTE: len(cols) should not be too big
	chunkSize := DefaultPageSize
	if len(limits) > 0 && limits[0] > 0 && limits[0] <= MaxPageSize {
		chunkSize = limits[0]
	}
	if length <= chunkSize {
		return s.UpdateAll(ctx, exec, cols)
	}

	rowsAffected := int64(0)
	start := 0
	for {
		end := start + chunkSize
		if end > length {
			end = length
		}
		rows, err := s[start:end].UpdateAll(ctx, exec, cols)
		if err != nil {
			return rowsAffected, err
		}

		rowsAffected += rows
		start = end
		if start >= length {
			break
		}
	}
	return rowsAffected, nil
}

// InsertAllByPage insert all Exam records from the slice.
// This function inserts data by pages to avoid exceeding Postgres limitation (max parameters: 65535)
func (s ExamSlice) InsertAllByPage(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns, limits ...int) (int64, error) {
	length := len(s)
	if length == 0 {
		return 0, nil
	}

	// max number of parameters = 65535
	chunkSize := MaxPageSize / reflect.ValueOf(&ExamColumns).Elem().NumField()
	if len(limits) > 0 && limits[0] > 0 && limits[0] < chunkSize {
		chunkSize = limits[0]
	}
	if length <= chunkSize {
		return s.InsertAll(ctx, exec, columns)
	}

	rowsAffected := int64(0)
	start := 0
	for {
		end := start + chunkSize
		if end > length {
			end = length
		}
		rows, err := s[start:end].InsertAll(ctx, exec, columns)
		if err != nil {
			return rowsAffected, err
		}

		rowsAffected += rows
		start = end
		if start >= length {
			break
		}
	}
	return rowsAffected, nil
}

// InsertIgnoreAllByPage insert all Exam records from the slice.
// This function inserts data by pages to avoid exceeding Postgres limitation (max parameters: 65535)
func (s ExamSlice) InsertIgnoreAllByPage(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns, limits ...int) (int64, error) {
	length := len(s)
	if length == 0 {
		return 0, nil
	}

	// max number of parameters = 65535
	chunkSize := MaxPageSize / reflect.ValueOf(&ExamColumns).Elem().NumField()
	if len(limits) > 0 && limits[0] > 0 && limits[0] < chunkSize {
		chunkSize = limits[0]
	}
	if length <= chunkSize {
		return s.InsertIgnoreAll(ctx, exec, columns)
	}

	rowsAffected := int64(0)
	start := 0
	for {
		end := start + chunkSize
		if end > length {
			end = length
		}
		rows, err := s[start:end].InsertIgnoreAll(ctx, exec, columns)
		if err != nil {
			return rowsAffected, err
		}

		rowsAffected += rows
		start = end
		if start >= length {
			break
		}
	}
	return rowsAffected, nil
}

// UpsertAllByPage upsert all Exam records from the slice.
// This function upserts data by pages to avoid exceeding Postgres limitation (max parameters: 65535)
func (s ExamSlice) UpsertAllByPage(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, limits ...int) (int64, error) {
	length := len(s)
	if length == 0 {
		return 0, nil
	}

	// max number of parameters = 65535
	chunkSize := MaxPageSize / reflect.ValueOf(&ExamColumns).Elem().NumField()
	if len(limits) > 0 && limits[0] > 0 && limits[0] < chunkSize {
		chunkSize = limits[0]
	}
	if length <= chunkSize {
		return s.UpsertAll(ctx, exec, updateOnConflict, conflictColumns, updateColumns, insertColumns)
	}

	rowsAffected := int64(0)
	start := 0
	for {
		end := start + chunkSize
		if end > length {
			end = length
		}
		rows, err := s[start:end].UpsertAll(ctx, exec, updateOnConflict, conflictColumns, updateColumns, insertColumns)
		if err != nil {
			return rowsAffected, err
		}

		rowsAffected += rows
		start = end
		if start >= length {
			break
		}
	}
	return rowsAffected, nil
}

// LoadExamParticipantsByPage performs eager loading of values by page. This is for a 1-M or N-M relationship.
func (s ExamSlice) LoadExamParticipantsByPage(ctx context.Context, e boil.ContextExecutor, mods ...qm.QueryMod) error {
	return s.LoadExamParticipantsByPageEx(ctx, e, DefaultPageSize, mods...)
}
func (s ExamSlice) LoadExamParticipantsByPageEx(ctx context.Context, e boil.ContextExecutor, pageSize int, mods ...qm.QueryMod) error {
	if len(s) == 0 {
		return nil
	}
	for _, chunk := range chunkSlice[*Exam](s, pageSize) {
		if err := chunk[0].L.LoadExamParticipants(ctx, e, false, &chunk, queryMods(mods)); err != nil {
			return err
		}
	}
	return nil
}

func (s ExamSlice) GetLoadedExamParticipants() ExamParticipantSlice {
	result := make(ExamParticipantSlice, 0, len(s)*2)
	for _, item := range s {
		if item.R == nil || item.R.ExamParticipants == nil {
			continue
		}
		result = append(result, item.R.ExamParticipants...)
	}
	return result
}

// LoadExamQuestionsByPage performs eager loading of values by page. This is for a 1-M or N-M relationship.
func (s ExamSlice) LoadExamQuestionsByPage(ctx context.Context, e boil.ContextExecutor, mods ...qm.QueryMod) error {
	return s.LoadExamQuestionsByPageEx(ctx, e, DefaultPageSize, mods...)
}
func (s ExamSlice) LoadExamQuestionsByPageEx(ctx context.Context, e boil.ContextExecutor, pageSize int, mods ...qm.QueryMod) error {
	if len(s) == 0 {
		return nil
	}
	for _, chunk := range chunkSlice[*Exam](s, pageSize) {
		if err := chunk[0].L.LoadExamQuestions(ctx, e, false, &chunk, queryMods(mods)); err != nil {
			return err
		}
	}
	return nil
}

func (s ExamSlice) GetLoadedExamQuestions() ExamQuestionSlice {
	result := make(ExamQuestionSlice, 0, len(s)*2)
	for _, item := range s {
		if item.R == nil || item.R.ExamQuestions == nil {
			continue
		}
		result = append(result, item.R.ExamQuestions...)
	}
	return result
}

///////////////////////////////// END EXTENSIONS /////////////////////////////////
