// Code generated by SQLBoiler 4.16.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ExamParticipant is an object representing the database table.
type ExamParticipant struct {
	UserID    string    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	ExamID    string    `boil:"exam_id" json:"exam_id" toml:"exam_id" yaml:"exam_id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *examParticipantR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L examParticipantL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ExamParticipantColumns = struct {
	UserID    string
	ExamID    string
	CreatedAt string
	UpdatedAt string
}{
	UserID:    "user_id",
	ExamID:    "exam_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var ExamParticipantTableColumns = struct {
	UserID    string
	ExamID    string
	CreatedAt string
	UpdatedAt string
}{
	UserID:    "exam_participants.user_id",
	ExamID:    "exam_participants.exam_id",
	CreatedAt: "exam_participants.created_at",
	UpdatedAt: "exam_participants.updated_at",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var ExamParticipantWhere = struct {
	UserID    whereHelperstring
	ExamID    whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	UserID:    whereHelperstring{field: "\"exam_participants\".\"user_id\""},
	ExamID:    whereHelperstring{field: "\"exam_participants\".\"exam_id\""},
	CreatedAt: whereHelpertime_Time{field: "\"exam_participants\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"exam_participants\".\"updated_at\""},
}

// ExamParticipantRels is where relationship names are stored.
var ExamParticipantRels = struct {
	Exam string
	User string
}{
	Exam: "Exam",
	User: "User",
}

// examParticipantR is where relationships are stored.
type examParticipantR struct {
	Exam *Exam `boil:"Exam" json:"Exam" toml:"Exam" yaml:"Exam"`
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*examParticipantR) NewStruct() *examParticipantR {
	return &examParticipantR{}
}

func (r *examParticipantR) GetExam() *Exam {
	if r == nil {
		return nil
	}
	return r.Exam
}

func (r *examParticipantR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// examParticipantL is where Load methods for each relationship are stored.
type examParticipantL struct{}

var (
	examParticipantAllColumns            = []string{"user_id", "exam_id", "created_at", "updated_at"}
	examParticipantColumnsWithoutDefault = []string{"user_id", "exam_id", "created_at", "updated_at"}
	examParticipantColumnsWithDefault    = []string{}
	examParticipantPrimaryKeyColumns     = []string{"user_id", "exam_id"}
	examParticipantGeneratedColumns      = []string{}
)

type (
	// ExamParticipantSlice is an alias for a slice of pointers to ExamParticipant.
	// This should almost always be used instead of []ExamParticipant.
	ExamParticipantSlice []*ExamParticipant
	// ExamParticipantHook is the signature for custom ExamParticipant hook methods
	ExamParticipantHook func(context.Context, boil.ContextExecutor, *ExamParticipant) error

	examParticipantQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	examParticipantType                 = reflect.TypeOf(&ExamParticipant{})
	examParticipantMapping              = queries.MakeStructMapping(examParticipantType)
	examParticipantPrimaryKeyMapping, _ = queries.BindMapping(examParticipantType, examParticipantMapping, examParticipantPrimaryKeyColumns)
	examParticipantInsertCacheMut       sync.RWMutex
	examParticipantInsertCache          = make(map[string]insertCache)
	examParticipantUpdateCacheMut       sync.RWMutex
	examParticipantUpdateCache          = make(map[string]updateCache)
	examParticipantUpsertCacheMut       sync.RWMutex
	examParticipantUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var examParticipantAfterSelectMu sync.Mutex
var examParticipantAfterSelectHooks []ExamParticipantHook

var examParticipantBeforeInsertMu sync.Mutex
var examParticipantBeforeInsertHooks []ExamParticipantHook
var examParticipantAfterInsertMu sync.Mutex
var examParticipantAfterInsertHooks []ExamParticipantHook

var examParticipantBeforeUpdateMu sync.Mutex
var examParticipantBeforeUpdateHooks []ExamParticipantHook
var examParticipantAfterUpdateMu sync.Mutex
var examParticipantAfterUpdateHooks []ExamParticipantHook

var examParticipantBeforeDeleteMu sync.Mutex
var examParticipantBeforeDeleteHooks []ExamParticipantHook
var examParticipantAfterDeleteMu sync.Mutex
var examParticipantAfterDeleteHooks []ExamParticipantHook

var examParticipantBeforeUpsertMu sync.Mutex
var examParticipantBeforeUpsertHooks []ExamParticipantHook
var examParticipantAfterUpsertMu sync.Mutex
var examParticipantAfterUpsertHooks []ExamParticipantHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ExamParticipant) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examParticipantAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ExamParticipant) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examParticipantBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ExamParticipant) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examParticipantAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ExamParticipant) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examParticipantBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ExamParticipant) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examParticipantAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ExamParticipant) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examParticipantBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ExamParticipant) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examParticipantAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ExamParticipant) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examParticipantBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ExamParticipant) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examParticipantAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddExamParticipantHook registers your hook function for all future operations.
func AddExamParticipantHook(hookPoint boil.HookPoint, examParticipantHook ExamParticipantHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		examParticipantAfterSelectMu.Lock()
		examParticipantAfterSelectHooks = append(examParticipantAfterSelectHooks, examParticipantHook)
		examParticipantAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		examParticipantBeforeInsertMu.Lock()
		examParticipantBeforeInsertHooks = append(examParticipantBeforeInsertHooks, examParticipantHook)
		examParticipantBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		examParticipantAfterInsertMu.Lock()
		examParticipantAfterInsertHooks = append(examParticipantAfterInsertHooks, examParticipantHook)
		examParticipantAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		examParticipantBeforeUpdateMu.Lock()
		examParticipantBeforeUpdateHooks = append(examParticipantBeforeUpdateHooks, examParticipantHook)
		examParticipantBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		examParticipantAfterUpdateMu.Lock()
		examParticipantAfterUpdateHooks = append(examParticipantAfterUpdateHooks, examParticipantHook)
		examParticipantAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		examParticipantBeforeDeleteMu.Lock()
		examParticipantBeforeDeleteHooks = append(examParticipantBeforeDeleteHooks, examParticipantHook)
		examParticipantBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		examParticipantAfterDeleteMu.Lock()
		examParticipantAfterDeleteHooks = append(examParticipantAfterDeleteHooks, examParticipantHook)
		examParticipantAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		examParticipantBeforeUpsertMu.Lock()
		examParticipantBeforeUpsertHooks = append(examParticipantBeforeUpsertHooks, examParticipantHook)
		examParticipantBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		examParticipantAfterUpsertMu.Lock()
		examParticipantAfterUpsertHooks = append(examParticipantAfterUpsertHooks, examParticipantHook)
		examParticipantAfterUpsertMu.Unlock()
	}
}

// OneG returns a single examParticipant record from the query using the global executor.
func (q examParticipantQuery) OneG(ctx context.Context) (*ExamParticipant, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single examParticipant record from the query.
func (q examParticipantQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ExamParticipant, error) {
	o := &ExamParticipant{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for exam_participants")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ExamParticipant records from the query using the global executor.
func (q examParticipantQuery) AllG(ctx context.Context) (ExamParticipantSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ExamParticipant records from the query.
func (q examParticipantQuery) All(ctx context.Context, exec boil.ContextExecutor) (ExamParticipantSlice, error) {
	var o []*ExamParticipant

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ExamParticipant slice")
	}

	if len(examParticipantAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ExamParticipant records in the query using the global executor
func (q examParticipantQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ExamParticipant records in the query.
func (q examParticipantQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count exam_participants rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q examParticipantQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q examParticipantQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if exam_participants exists")
	}

	return count > 0, nil
}

// Exam pointed to by the foreign key.
func (o *ExamParticipant) Exam(mods ...qm.QueryMod) examQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ExamID),
	}

	queryMods = append(queryMods, mods...)

	return Exams(queryMods...)
}

// User pointed to by the foreign key.
func (o *ExamParticipant) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadExam allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (examParticipantL) LoadExam(ctx context.Context, e boil.ContextExecutor, singular bool, maybeExamParticipant interface{}, mods queries.Applicator) error {
	var slice []*ExamParticipant
	var object *ExamParticipant

	if singular {
		var ok bool
		object, ok = maybeExamParticipant.(*ExamParticipant)
		if !ok {
			object = new(ExamParticipant)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeExamParticipant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeExamParticipant))
			}
		}
	} else {
		s, ok := maybeExamParticipant.(*[]*ExamParticipant)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeExamParticipant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeExamParticipant))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &examParticipantR{}
		}
		args[object.ExamID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &examParticipantR{}
			}

			args[obj.ExamID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`exams`),
		qm.WhereIn(`exams.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Exam")
	}

	var resultSlice []*Exam
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Exam")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for exams")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for exams")
	}

	if len(examAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Exam = foreign
		if foreign.R == nil {
			foreign.R = &examR{}
		}
		foreign.R.ExamParticipants = append(foreign.R.ExamParticipants, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ExamID == foreign.ID {
				local.R.Exam = foreign
				if foreign.R == nil {
					foreign.R = &examR{}
				}
				foreign.R.ExamParticipants = append(foreign.R.ExamParticipants, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (examParticipantL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeExamParticipant interface{}, mods queries.Applicator) error {
	var slice []*ExamParticipant
	var object *ExamParticipant

	if singular {
		var ok bool
		object, ok = maybeExamParticipant.(*ExamParticipant)
		if !ok {
			object = new(ExamParticipant)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeExamParticipant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeExamParticipant))
			}
		}
	} else {
		s, ok := maybeExamParticipant.(*[]*ExamParticipant)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeExamParticipant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeExamParticipant))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &examParticipantR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &examParticipantR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.ExamParticipants = append(foreign.R.ExamParticipants, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.ExamParticipants = append(foreign.R.ExamParticipants, local)
				break
			}
		}
	}

	return nil
}

// SetExamG of the examParticipant to the related item.
// Sets o.R.Exam to related.
// Adds o to related.R.ExamParticipants.
// Uses the global database handle.
func (o *ExamParticipant) SetExamG(ctx context.Context, insert bool, related *Exam) error {
	return o.SetExam(ctx, boil.GetContextDB(), insert, related)
}

// SetExam of the examParticipant to the related item.
// Sets o.R.Exam to related.
// Adds o to related.R.ExamParticipants.
func (o *ExamParticipant) SetExam(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Exam) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"exam_participants\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"exam_id"}),
		strmangle.WhereClause("\"", "\"", 2, examParticipantPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.ExamID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ExamID = related.ID
	if o.R == nil {
		o.R = &examParticipantR{
			Exam: related,
		}
	} else {
		o.R.Exam = related
	}

	if related.R == nil {
		related.R = &examR{
			ExamParticipants: ExamParticipantSlice{o},
		}
	} else {
		related.R.ExamParticipants = append(related.R.ExamParticipants, o)
	}

	return nil
}

// SetUserG of the examParticipant to the related item.
// Sets o.R.User to related.
// Adds o to related.R.ExamParticipants.
// Uses the global database handle.
func (o *ExamParticipant) SetUserG(ctx context.Context, insert bool, related *User) error {
	return o.SetUser(ctx, boil.GetContextDB(), insert, related)
}

// SetUser of the examParticipant to the related item.
// Sets o.R.User to related.
// Adds o to related.R.ExamParticipants.
func (o *ExamParticipant) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"exam_participants\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, examParticipantPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.ExamID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &examParticipantR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			ExamParticipants: ExamParticipantSlice{o},
		}
	} else {
		related.R.ExamParticipants = append(related.R.ExamParticipants, o)
	}

	return nil
}

// ExamParticipants retrieves all the records using an executor.
func ExamParticipants(mods ...qm.QueryMod) examParticipantQuery {
	mods = append(mods, qm.From("\"exam_participants\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"exam_participants\".*"})
	}

	return examParticipantQuery{q}
}

// FindExamParticipantG retrieves a single record by ID.
func FindExamParticipantG(ctx context.Context, userID string, examID string, selectCols ...string) (*ExamParticipant, error) {
	return FindExamParticipant(ctx, boil.GetContextDB(), userID, examID, selectCols...)
}

// FindExamParticipant retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindExamParticipant(ctx context.Context, exec boil.ContextExecutor, userID string, examID string, selectCols ...string) (*ExamParticipant, error) {
	examParticipantObj := &ExamParticipant{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"exam_participants\" where \"user_id\"=$1 AND \"exam_id\"=$2", sel,
	)

	q := queries.Raw(query, userID, examID)

	err := q.Bind(ctx, exec, examParticipantObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from exam_participants")
	}

	if err = examParticipantObj.doAfterSelectHooks(ctx, exec); err != nil {
		return examParticipantObj, err
	}

	return examParticipantObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ExamParticipant) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ExamParticipant) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no exam_participants provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(examParticipantColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	examParticipantInsertCacheMut.RLock()
	cache, cached := examParticipantInsertCache[key]
	examParticipantInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			examParticipantAllColumns,
			examParticipantColumnsWithDefault,
			examParticipantColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(examParticipantType, examParticipantMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(examParticipantType, examParticipantMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"exam_participants\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"exam_participants\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into exam_participants")
	}

	if !cached {
		examParticipantInsertCacheMut.Lock()
		examParticipantInsertCache[key] = cache
		examParticipantInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single ExamParticipant record using the global executor.
// See Update for more documentation.
func (o *ExamParticipant) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ExamParticipant.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ExamParticipant) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	examParticipantUpdateCacheMut.RLock()
	cache, cached := examParticipantUpdateCache[key]
	examParticipantUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			examParticipantAllColumns,
			examParticipantPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update exam_participants, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"exam_participants\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, examParticipantPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(examParticipantType, examParticipantMapping, append(wl, examParticipantPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update exam_participants row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for exam_participants")
	}

	if !cached {
		examParticipantUpdateCacheMut.Lock()
		examParticipantUpdateCache[key] = cache
		examParticipantUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q examParticipantQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q examParticipantQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for exam_participants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for exam_participants")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ExamParticipantSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ExamParticipantSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), examParticipantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"exam_participants\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, examParticipantPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in examParticipant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all examParticipant")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ExamParticipant) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ExamParticipant) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no exam_participants provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(examParticipantColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	examParticipantUpsertCacheMut.RLock()
	cache, cached := examParticipantUpsertCache[key]
	examParticipantUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			examParticipantAllColumns,
			examParticipantColumnsWithDefault,
			examParticipantColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			examParticipantAllColumns,
			examParticipantPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert exam_participants, could not build update column list")
		}

		ret := strmangle.SetComplement(examParticipantAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(examParticipantPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert exam_participants, could not build conflict column list")
			}

			conflict = make([]string, len(examParticipantPrimaryKeyColumns))
			copy(conflict, examParticipantPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"exam_participants\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(examParticipantType, examParticipantMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(examParticipantType, examParticipantMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert exam_participants")
	}

	if !cached {
		examParticipantUpsertCacheMut.Lock()
		examParticipantUpsertCache[key] = cache
		examParticipantUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single ExamParticipant record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ExamParticipant) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single ExamParticipant record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ExamParticipant) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ExamParticipant provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), examParticipantPrimaryKeyMapping)
	sql := "DELETE FROM \"exam_participants\" WHERE \"user_id\"=$1 AND \"exam_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from exam_participants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for exam_participants")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q examParticipantQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q examParticipantQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no examParticipantQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from exam_participants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for exam_participants")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ExamParticipantSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ExamParticipantSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(examParticipantBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), examParticipantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"exam_participants\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, examParticipantPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from examParticipant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for exam_participants")
	}

	if len(examParticipantAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ExamParticipant) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no ExamParticipant provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ExamParticipant) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindExamParticipant(ctx, exec, o.UserID, o.ExamID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ExamParticipantSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty ExamParticipantSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ExamParticipantSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ExamParticipantSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), examParticipantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"exam_participants\".* FROM \"exam_participants\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, examParticipantPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ExamParticipantSlice")
	}

	*o = slice

	return nil
}

// ExamParticipantExistsG checks if the ExamParticipant row exists.
func ExamParticipantExistsG(ctx context.Context, userID string, examID string) (bool, error) {
	return ExamParticipantExists(ctx, boil.GetContextDB(), userID, examID)
}

// ExamParticipantExists checks if the ExamParticipant row exists.
func ExamParticipantExists(ctx context.Context, exec boil.ContextExecutor, userID string, examID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"exam_participants\" where \"user_id\"=$1 AND \"exam_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, userID, examID)
	}
	row := exec.QueryRowContext(ctx, sql, userID, examID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if exam_participants exists")
	}

	return exists, nil
}

// Exists checks if the ExamParticipant row exists.
func (o *ExamParticipant) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ExamParticipantExists(ctx, exec, o.UserID, o.ExamID)
}

// /////////////////////////////// BEGIN EXTENSIONS /////////////////////////////////
// Expose table columns
var (
	ExamParticipantAllColumns            = examParticipantAllColumns
	ExamParticipantColumnsWithoutDefault = examParticipantColumnsWithoutDefault
	ExamParticipantColumnsWithDefault    = examParticipantColumnsWithDefault
	ExamParticipantPrimaryKeyColumns     = examParticipantPrimaryKeyColumns
	ExamParticipantGeneratedColumns      = examParticipantGeneratedColumns
)

// InsertAll inserts all rows with the specified column values, using an executor.
// IMPORTANT: this will calculate the widest columns from all items in the slice, be careful if you want to use default column values
func (o ExamParticipantSlice) InsertAll(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	// Calculate the widest columns from all rows need to insert
	wlCols := make(map[string]struct{}, 10)
	for _, row := range o {
		wl, _ := columns.InsertColumnSet(
			examParticipantAllColumns,
			examParticipantColumnsWithDefault,
			examParticipantColumnsWithoutDefault,
			queries.NonZeroDefaultSet(examParticipantColumnsWithDefault, row),
		)
		for _, col := range wl {
			wlCols[col] = struct{}{}
		}
	}
	wl := make([]string, 0, len(wlCols))
	for _, col := range examParticipantAllColumns {
		if _, ok := wlCols[col]; ok {
			wl = append(wl, col)
		}
	}

	var sql string
	vals := []interface{}{}
	for i, row := range o {
		if !boil.TimestampsAreSkipped(ctx) {
			currTime := time.Now().In(boil.GetLocation())
			if row.CreatedAt.IsZero() {
				row.CreatedAt = currTime
			}
			if row.UpdatedAt.IsZero() {
				row.UpdatedAt = currTime
			}
		}

		if err := row.doBeforeInsertHooks(ctx, exec); err != nil {
			return 0, err
		}

		if i == 0 {
			sql = "INSERT INTO \"exam_participants\" " + "(\"" + strings.Join(wl, "\",\"") + "\")" + " VALUES "
		}
		sql += strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), len(vals)+1, len(wl))
		if i != len(o)-1 {
			sql += ","
		}
		valMapping, err := queries.BindMapping(examParticipantType, examParticipantMapping, wl)
		if err != nil {
			return 0, err
		}

		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valMapping)...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, vals)
	}

	result, err := exec.ExecContext(ctx, sql, vals...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to insert all from examParticipant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by insertall for exam_participants")
	}

	if len(examParticipantAfterInsertHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterInsertHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// InsertIgnoreAll inserts all rows with ignoring the existing ones having the same primary key values.
// NOTE: This function calls UpsertAll() with updateOnConflict=false and conflictColumns=<primary key columns>
// IMPORTANT: this will calculate the widest columns from all items in the slice, be careful if you want to use default column values
// IMPORTANT: if the table has `id` column of auto-increment type, this may not work as expected
func (o ExamParticipantSlice) InsertIgnoreAll(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	return o.UpsertAll(ctx, exec, false, examParticipantPrimaryKeyColumns, boil.None(), columns)
}

// UpsertAll inserts or updates all rows
// Currently it doesn't support "NoContext" and "NoRowsAffected"
// IMPORTANT: this will calculate the widest columns from all items in the slice, be careful if you want to use default column values
// IMPORTANT: if the table has `id` column of auto-increment type, this may not work as expected
func (o ExamParticipantSlice) UpsertAll(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	// Calculate the widest columns from all rows need to upsert
	insertCols := make(map[string]struct{}, 10)
	for _, row := range o {
		insert, _ := insertColumns.InsertColumnSet(
			examParticipantAllColumns,
			examParticipantColumnsWithDefault,
			examParticipantColumnsWithoutDefault,
			queries.NonZeroDefaultSet(examParticipantColumnsWithDefault, row),
		)
		for _, col := range insert {
			insertCols[col] = struct{}{}
		}
	}
	insert := make([]string, 0, len(insertCols))
	for _, col := range examParticipantAllColumns {
		if _, ok := insertCols[col]; ok {
			insert = append(insert, col)
		}
	}

	update := updateColumns.UpdateColumnSet(
		examParticipantAllColumns,
		examParticipantPrimaryKeyColumns,
	)

	if updateOnConflict && len(update) == 0 {
		return 0, errors.New("models: unable to upsert exam_participants, could not build update column list")
	}

	conflict := conflictColumns
	if len(conflict) == 0 {
		conflict = make([]string, len(examParticipantPrimaryKeyColumns))
		copy(conflict, examParticipantPrimaryKeyColumns)
	}

	buf := strmangle.GetBuffer()
	defer strmangle.PutBuffer(buf)

	columns := "DEFAULT VALUES"
	if len(insert) != 0 {
		columns = fmt.Sprintf("(%s) VALUES %s",
			strings.Join(insert, ", "),
			strmangle.Placeholders(dialect.UseIndexPlaceholders, len(insert)*len(o), 1, len(insert)),
		)
	}

	fmt.Fprintf(
		buf,
		"INSERT INTO %s %s ON CONFLICT ",
		"\"exam_participants\"",
		columns,
	)

	if !updateOnConflict || len(update) == 0 {
		buf.WriteString("DO NOTHING")
	} else {
		buf.WriteByte('(')
		buf.WriteString(strings.Join(conflict, ", "))
		buf.WriteString(") DO UPDATE SET ")

		for i, v := range update {
			if i != 0 {
				buf.WriteByte(',')
			}
			quoted := strmangle.IdentQuote(dialect.LQ, dialect.RQ, v)
			buf.WriteString(quoted)
			buf.WriteString(" = EXCLUDED.")
			buf.WriteString(quoted)
		}
	}

	query := buf.String()
	valueMapping, err := queries.BindMapping(examParticipantType, examParticipantMapping, insert)
	if err != nil {
		return 0, err
	}

	var vals []interface{}
	for _, row := range o {
		if !boil.TimestampsAreSkipped(ctx) {
			currTime := time.Now().In(boil.GetLocation())
			if row.CreatedAt.IsZero() {
				row.CreatedAt = currTime
			}

			row.UpdatedAt = currTime
		}

		if err := row.doBeforeUpsertHooks(ctx, exec); err != nil {
			return 0, err
		}

		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valueMapping)...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, vals)
	}

	result, err := exec.ExecContext(ctx, query, vals...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to upsert for exam_participants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by upsert for exam_participants")
	}

	if len(examParticipantAfterUpsertHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterUpsertHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// DeleteAllByPage delete all ExamParticipant records from the slice.
// This function deletes data by pages to avoid exceeding Postgres limitation (max parameters: 65535)
func (s ExamParticipantSlice) DeleteAllByPage(ctx context.Context, exec boil.ContextExecutor, limits ...int) (int64, error) {
	length := len(s)
	if length == 0 {
		return 0, nil
	}

	// max number of parameters = 65535
	chunkSize := DefaultPageSize
	if len(limits) > 0 && limits[0] > 0 && limits[0] <= MaxPageSize {
		chunkSize = limits[0]
	}
	if length <= chunkSize {
		return s.DeleteAll(ctx, exec)
	}

	rowsAffected := int64(0)
	start := 0
	for {
		end := start + chunkSize
		if end > length {
			end = length
		}
		rows, err := s[start:end].DeleteAll(ctx, exec)
		if err != nil {
			return rowsAffected, err
		}

		rowsAffected += rows
		start = end
		if start >= length {
			break
		}
	}
	return rowsAffected, nil
}

// UpdateAllByPage update all ExamParticipant records from the slice.
// This function updates data by pages to avoid exceeding Postgres limitation (max parameters: 65535)
func (s ExamParticipantSlice) UpdateAllByPage(ctx context.Context, exec boil.ContextExecutor, cols M, limits ...int) (int64, error) {
	length := len(s)
	if length == 0 {
		return 0, nil
	}

	// max number of parameters = 65535
	// NOTE: len(cols) should not be too big
	chunkSize := DefaultPageSize
	if len(limits) > 0 && limits[0] > 0 && limits[0] <= MaxPageSize {
		chunkSize = limits[0]
	}
	if length <= chunkSize {
		return s.UpdateAll(ctx, exec, cols)
	}

	rowsAffected := int64(0)
	start := 0
	for {
		end := start + chunkSize
		if end > length {
			end = length
		}
		rows, err := s[start:end].UpdateAll(ctx, exec, cols)
		if err != nil {
			return rowsAffected, err
		}

		rowsAffected += rows
		start = end
		if start >= length {
			break
		}
	}
	return rowsAffected, nil
}

// InsertAllByPage insert all ExamParticipant records from the slice.
// This function inserts data by pages to avoid exceeding Postgres limitation (max parameters: 65535)
func (s ExamParticipantSlice) InsertAllByPage(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns, limits ...int) (int64, error) {
	length := len(s)
	if length == 0 {
		return 0, nil
	}

	// max number of parameters = 65535
	chunkSize := MaxPageSize / reflect.ValueOf(&ExamParticipantColumns).Elem().NumField()
	if len(limits) > 0 && limits[0] > 0 && limits[0] < chunkSize {
		chunkSize = limits[0]
	}
	if length <= chunkSize {
		return s.InsertAll(ctx, exec, columns)
	}

	rowsAffected := int64(0)
	start := 0
	for {
		end := start + chunkSize
		if end > length {
			end = length
		}
		rows, err := s[start:end].InsertAll(ctx, exec, columns)
		if err != nil {
			return rowsAffected, err
		}

		rowsAffected += rows
		start = end
		if start >= length {
			break
		}
	}
	return rowsAffected, nil
}

// InsertIgnoreAllByPage insert all ExamParticipant records from the slice.
// This function inserts data by pages to avoid exceeding Postgres limitation (max parameters: 65535)
func (s ExamParticipantSlice) InsertIgnoreAllByPage(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns, limits ...int) (int64, error) {
	length := len(s)
	if length == 0 {
		return 0, nil
	}

	// max number of parameters = 65535
	chunkSize := MaxPageSize / reflect.ValueOf(&ExamParticipantColumns).Elem().NumField()
	if len(limits) > 0 && limits[0] > 0 && limits[0] < chunkSize {
		chunkSize = limits[0]
	}
	if length <= chunkSize {
		return s.InsertIgnoreAll(ctx, exec, columns)
	}

	rowsAffected := int64(0)
	start := 0
	for {
		end := start + chunkSize
		if end > length {
			end = length
		}
		rows, err := s[start:end].InsertIgnoreAll(ctx, exec, columns)
		if err != nil {
			return rowsAffected, err
		}

		rowsAffected += rows
		start = end
		if start >= length {
			break
		}
	}
	return rowsAffected, nil
}

// UpsertAllByPage upsert all ExamParticipant records from the slice.
// This function upserts data by pages to avoid exceeding Postgres limitation (max parameters: 65535)
func (s ExamParticipantSlice) UpsertAllByPage(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, limits ...int) (int64, error) {
	length := len(s)
	if length == 0 {
		return 0, nil
	}

	// max number of parameters = 65535
	chunkSize := MaxPageSize / reflect.ValueOf(&ExamParticipantColumns).Elem().NumField()
	if len(limits) > 0 && limits[0] > 0 && limits[0] < chunkSize {
		chunkSize = limits[0]
	}
	if length <= chunkSize {
		return s.UpsertAll(ctx, exec, updateOnConflict, conflictColumns, updateColumns, insertColumns)
	}

	rowsAffected := int64(0)
	start := 0
	for {
		end := start + chunkSize
		if end > length {
			end = length
		}
		rows, err := s[start:end].UpsertAll(ctx, exec, updateOnConflict, conflictColumns, updateColumns, insertColumns)
		if err != nil {
			return rowsAffected, err
		}

		rowsAffected += rows
		start = end
		if start >= length {
			break
		}
	}
	return rowsAffected, nil
}

// LoadExamsByPage performs eager loading of values by page. This is for a N-1 relationship.
func (s ExamParticipantSlice) LoadExamsByPage(ctx context.Context, e boil.ContextExecutor, mods ...qm.QueryMod) error {
	return s.LoadExamsByPageEx(ctx, e, DefaultPageSize, mods...)
}
func (s ExamParticipantSlice) LoadExamsByPageEx(ctx context.Context, e boil.ContextExecutor, pageSize int, mods ...qm.QueryMod) error {
	if len(s) == 0 {
		return nil
	}
	for _, chunk := range chunkSlice[*ExamParticipant](s, pageSize) {
		if err := chunk[0].L.LoadExam(ctx, e, false, &chunk, queryMods(mods)); err != nil {
			return err
		}
	}
	return nil
}

func (s ExamParticipantSlice) GetLoadedExams() ExamSlice {
	result := make(ExamSlice, 0, len(s))
	mapCheckDup := make(map[*Exam]struct{})
	for _, item := range s {
		if item.R == nil || item.R.Exam == nil {
			continue
		}
		if _, ok := mapCheckDup[item.R.Exam]; ok {
			continue
		}
		result = append(result, item.R.Exam)
		mapCheckDup[item.R.Exam] = struct{}{}
	}
	return result
}

// LoadUsersByPage performs eager loading of values by page. This is for a N-1 relationship.
func (s ExamParticipantSlice) LoadUsersByPage(ctx context.Context, e boil.ContextExecutor, mods ...qm.QueryMod) error {
	return s.LoadUsersByPageEx(ctx, e, DefaultPageSize, mods...)
}
func (s ExamParticipantSlice) LoadUsersByPageEx(ctx context.Context, e boil.ContextExecutor, pageSize int, mods ...qm.QueryMod) error {
	if len(s) == 0 {
		return nil
	}
	for _, chunk := range chunkSlice[*ExamParticipant](s, pageSize) {
		if err := chunk[0].L.LoadUser(ctx, e, false, &chunk, queryMods(mods)); err != nil {
			return err
		}
	}
	return nil
}

func (s ExamParticipantSlice) GetLoadedUsers() UserSlice {
	result := make(UserSlice, 0, len(s))
	mapCheckDup := make(map[*User]struct{})
	for _, item := range s {
		if item.R == nil || item.R.User == nil {
			continue
		}
		if _, ok := mapCheckDup[item.R.User]; ok {
			continue
		}
		result = append(result, item.R.User)
		mapCheckDup[item.R.User] = struct{}{}
	}
	return result
}

///////////////////////////////// END EXTENSIONS /////////////////////////////////
