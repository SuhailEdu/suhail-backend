// Code generated by SQLBoiler 4.16.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// ExamQuestion is an object representing the database table.
type ExamQuestion struct {
	ID        string     `boil:"id" json:"id" toml:"id" yaml:"id"`
	ExamID    string     `boil:"exam_id" json:"exam_id" toml:"exam_id" yaml:"exam_id"`
	Question  string     `boil:"question" json:"question" toml:"question" yaml:"question"`
	Answers   types.JSON `boil:"answers" json:"answers" toml:"answers" yaml:"answers"`
	Type      string     `boil:"type" json:"type" toml:"type" yaml:"type"`
	CreatedAt time.Time  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time  `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *examQuestionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L examQuestionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ExamQuestionColumns = struct {
	ID        string
	ExamID    string
	Question  string
	Answers   string
	Type      string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	ExamID:    "exam_id",
	Question:  "question",
	Answers:   "answers",
	Type:      "type",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var ExamQuestionTableColumns = struct {
	ID        string
	ExamID    string
	Question  string
	Answers   string
	Type      string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "exam_questions.id",
	ExamID:    "exam_questions.exam_id",
	Question:  "exam_questions.question",
	Answers:   "exam_questions.answers",
	Type:      "exam_questions.type",
	CreatedAt: "exam_questions.created_at",
	UpdatedAt: "exam_questions.updated_at",
}

// Generated where

type whereHelpertypes_JSON struct{ field string }

func (w whereHelpertypes_JSON) EQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_JSON) NEQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_JSON) LT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_JSON) LTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_JSON) GT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_JSON) GTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var ExamQuestionWhere = struct {
	ID        whereHelperstring
	ExamID    whereHelperstring
	Question  whereHelperstring
	Answers   whereHelpertypes_JSON
	Type      whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperstring{field: "\"exam_questions\".\"id\""},
	ExamID:    whereHelperstring{field: "\"exam_questions\".\"exam_id\""},
	Question:  whereHelperstring{field: "\"exam_questions\".\"question\""},
	Answers:   whereHelpertypes_JSON{field: "\"exam_questions\".\"answers\""},
	Type:      whereHelperstring{field: "\"exam_questions\".\"type\""},
	CreatedAt: whereHelpertime_Time{field: "\"exam_questions\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"exam_questions\".\"updated_at\""},
}

// ExamQuestionRels is where relationship names are stored.
var ExamQuestionRels = struct {
	Exam string
}{
	Exam: "Exam",
}

// examQuestionR is where relationships are stored.
type examQuestionR struct {
	Exam *Exam `boil:"Exam" json:"Exam" toml:"Exam" yaml:"Exam"`
}

// NewStruct creates a new relationship struct
func (*examQuestionR) NewStruct() *examQuestionR {
	return &examQuestionR{}
}

func (r *examQuestionR) GetExam() *Exam {
	if r == nil {
		return nil
	}
	return r.Exam
}

// examQuestionL is where Load methods for each relationship are stored.
type examQuestionL struct{}

var (
	examQuestionAllColumns            = []string{"id", "exam_id", "question", "answers", "type", "created_at", "updated_at"}
	examQuestionColumnsWithoutDefault = []string{"exam_id", "question", "answers", "type"}
	examQuestionColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	examQuestionPrimaryKeyColumns     = []string{"id"}
	examQuestionGeneratedColumns      = []string{}
)

type (
	// ExamQuestionSlice is an alias for a slice of pointers to ExamQuestion.
	// This should almost always be used instead of []ExamQuestion.
	ExamQuestionSlice []*ExamQuestion
	// ExamQuestionHook is the signature for custom ExamQuestion hook methods
	ExamQuestionHook func(context.Context, boil.ContextExecutor, *ExamQuestion) error

	examQuestionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	examQuestionType                 = reflect.TypeOf(&ExamQuestion{})
	examQuestionMapping              = queries.MakeStructMapping(examQuestionType)
	examQuestionPrimaryKeyMapping, _ = queries.BindMapping(examQuestionType, examQuestionMapping, examQuestionPrimaryKeyColumns)
	examQuestionInsertCacheMut       sync.RWMutex
	examQuestionInsertCache          = make(map[string]insertCache)
	examQuestionUpdateCacheMut       sync.RWMutex
	examQuestionUpdateCache          = make(map[string]updateCache)
	examQuestionUpsertCacheMut       sync.RWMutex
	examQuestionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var examQuestionAfterSelectMu sync.Mutex
var examQuestionAfterSelectHooks []ExamQuestionHook

var examQuestionBeforeInsertMu sync.Mutex
var examQuestionBeforeInsertHooks []ExamQuestionHook
var examQuestionAfterInsertMu sync.Mutex
var examQuestionAfterInsertHooks []ExamQuestionHook

var examQuestionBeforeUpdateMu sync.Mutex
var examQuestionBeforeUpdateHooks []ExamQuestionHook
var examQuestionAfterUpdateMu sync.Mutex
var examQuestionAfterUpdateHooks []ExamQuestionHook

var examQuestionBeforeDeleteMu sync.Mutex
var examQuestionBeforeDeleteHooks []ExamQuestionHook
var examQuestionAfterDeleteMu sync.Mutex
var examQuestionAfterDeleteHooks []ExamQuestionHook

var examQuestionBeforeUpsertMu sync.Mutex
var examQuestionBeforeUpsertHooks []ExamQuestionHook
var examQuestionAfterUpsertMu sync.Mutex
var examQuestionAfterUpsertHooks []ExamQuestionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ExamQuestion) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examQuestionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ExamQuestion) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examQuestionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ExamQuestion) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examQuestionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ExamQuestion) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examQuestionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ExamQuestion) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examQuestionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ExamQuestion) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examQuestionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ExamQuestion) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examQuestionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ExamQuestion) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examQuestionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ExamQuestion) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examQuestionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddExamQuestionHook registers your hook function for all future operations.
func AddExamQuestionHook(hookPoint boil.HookPoint, examQuestionHook ExamQuestionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		examQuestionAfterSelectMu.Lock()
		examQuestionAfterSelectHooks = append(examQuestionAfterSelectHooks, examQuestionHook)
		examQuestionAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		examQuestionBeforeInsertMu.Lock()
		examQuestionBeforeInsertHooks = append(examQuestionBeforeInsertHooks, examQuestionHook)
		examQuestionBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		examQuestionAfterInsertMu.Lock()
		examQuestionAfterInsertHooks = append(examQuestionAfterInsertHooks, examQuestionHook)
		examQuestionAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		examQuestionBeforeUpdateMu.Lock()
		examQuestionBeforeUpdateHooks = append(examQuestionBeforeUpdateHooks, examQuestionHook)
		examQuestionBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		examQuestionAfterUpdateMu.Lock()
		examQuestionAfterUpdateHooks = append(examQuestionAfterUpdateHooks, examQuestionHook)
		examQuestionAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		examQuestionBeforeDeleteMu.Lock()
		examQuestionBeforeDeleteHooks = append(examQuestionBeforeDeleteHooks, examQuestionHook)
		examQuestionBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		examQuestionAfterDeleteMu.Lock()
		examQuestionAfterDeleteHooks = append(examQuestionAfterDeleteHooks, examQuestionHook)
		examQuestionAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		examQuestionBeforeUpsertMu.Lock()
		examQuestionBeforeUpsertHooks = append(examQuestionBeforeUpsertHooks, examQuestionHook)
		examQuestionBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		examQuestionAfterUpsertMu.Lock()
		examQuestionAfterUpsertHooks = append(examQuestionAfterUpsertHooks, examQuestionHook)
		examQuestionAfterUpsertMu.Unlock()
	}
}

// OneG returns a single examQuestion record from the query using the global executor.
func (q examQuestionQuery) OneG(ctx context.Context) (*ExamQuestion, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single examQuestion record from the query.
func (q examQuestionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ExamQuestion, error) {
	o := &ExamQuestion{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for exam_questions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ExamQuestion records from the query using the global executor.
func (q examQuestionQuery) AllG(ctx context.Context) (ExamQuestionSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ExamQuestion records from the query.
func (q examQuestionQuery) All(ctx context.Context, exec boil.ContextExecutor) (ExamQuestionSlice, error) {
	var o []*ExamQuestion

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ExamQuestion slice")
	}

	if len(examQuestionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ExamQuestion records in the query using the global executor
func (q examQuestionQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ExamQuestion records in the query.
func (q examQuestionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count exam_questions rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q examQuestionQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q examQuestionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if exam_questions exists")
	}

	return count > 0, nil
}

// Exam pointed to by the foreign key.
func (o *ExamQuestion) Exam(mods ...qm.QueryMod) examQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ExamID),
	}

	queryMods = append(queryMods, mods...)

	return Exams(queryMods...)
}

// LoadExam allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (examQuestionL) LoadExam(ctx context.Context, e boil.ContextExecutor, singular bool, maybeExamQuestion interface{}, mods queries.Applicator) error {
	var slice []*ExamQuestion
	var object *ExamQuestion

	if singular {
		var ok bool
		object, ok = maybeExamQuestion.(*ExamQuestion)
		if !ok {
			object = new(ExamQuestion)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeExamQuestion)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeExamQuestion))
			}
		}
	} else {
		s, ok := maybeExamQuestion.(*[]*ExamQuestion)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeExamQuestion)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeExamQuestion))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &examQuestionR{}
		}
		args[object.ExamID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &examQuestionR{}
			}

			args[obj.ExamID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`exams`),
		qm.WhereIn(`exams.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Exam")
	}

	var resultSlice []*Exam
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Exam")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for exams")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for exams")
	}

	if len(examAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Exam = foreign
		if foreign.R == nil {
			foreign.R = &examR{}
		}
		foreign.R.ExamQuestions = append(foreign.R.ExamQuestions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ExamID == foreign.ID {
				local.R.Exam = foreign
				if foreign.R == nil {
					foreign.R = &examR{}
				}
				foreign.R.ExamQuestions = append(foreign.R.ExamQuestions, local)
				break
			}
		}
	}

	return nil
}

// SetExamG of the examQuestion to the related item.
// Sets o.R.Exam to related.
// Adds o to related.R.ExamQuestions.
// Uses the global database handle.
func (o *ExamQuestion) SetExamG(ctx context.Context, insert bool, related *Exam) error {
	return o.SetExam(ctx, boil.GetContextDB(), insert, related)
}

// SetExam of the examQuestion to the related item.
// Sets o.R.Exam to related.
// Adds o to related.R.ExamQuestions.
func (o *ExamQuestion) SetExam(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Exam) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"exam_questions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"exam_id"}),
		strmangle.WhereClause("\"", "\"", 2, examQuestionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ExamID = related.ID
	if o.R == nil {
		o.R = &examQuestionR{
			Exam: related,
		}
	} else {
		o.R.Exam = related
	}

	if related.R == nil {
		related.R = &examR{
			ExamQuestions: ExamQuestionSlice{o},
		}
	} else {
		related.R.ExamQuestions = append(related.R.ExamQuestions, o)
	}

	return nil
}

// ExamQuestions retrieves all the records using an executor.
func ExamQuestions(mods ...qm.QueryMod) examQuestionQuery {
	mods = append(mods, qm.From("\"exam_questions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"exam_questions\".*"})
	}

	return examQuestionQuery{q}
}

// FindExamQuestionG retrieves a single record by ID.
func FindExamQuestionG(ctx context.Context, iD string, selectCols ...string) (*ExamQuestion, error) {
	return FindExamQuestion(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindExamQuestion retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindExamQuestion(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ExamQuestion, error) {
	examQuestionObj := &ExamQuestion{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"exam_questions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, examQuestionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from exam_questions")
	}

	if err = examQuestionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return examQuestionObj, err
	}

	return examQuestionObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ExamQuestion) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ExamQuestion) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no exam_questions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(examQuestionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	examQuestionInsertCacheMut.RLock()
	cache, cached := examQuestionInsertCache[key]
	examQuestionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			examQuestionAllColumns,
			examQuestionColumnsWithDefault,
			examQuestionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(examQuestionType, examQuestionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(examQuestionType, examQuestionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"exam_questions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"exam_questions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into exam_questions")
	}

	if !cached {
		examQuestionInsertCacheMut.Lock()
		examQuestionInsertCache[key] = cache
		examQuestionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single ExamQuestion record using the global executor.
// See Update for more documentation.
func (o *ExamQuestion) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ExamQuestion.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ExamQuestion) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	examQuestionUpdateCacheMut.RLock()
	cache, cached := examQuestionUpdateCache[key]
	examQuestionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			examQuestionAllColumns,
			examQuestionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update exam_questions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"exam_questions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, examQuestionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(examQuestionType, examQuestionMapping, append(wl, examQuestionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update exam_questions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for exam_questions")
	}

	if !cached {
		examQuestionUpdateCacheMut.Lock()
		examQuestionUpdateCache[key] = cache
		examQuestionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q examQuestionQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q examQuestionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for exam_questions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for exam_questions")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ExamQuestionSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ExamQuestionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), examQuestionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"exam_questions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, examQuestionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in examQuestion slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all examQuestion")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ExamQuestion) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ExamQuestion) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no exam_questions provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(examQuestionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	examQuestionUpsertCacheMut.RLock()
	cache, cached := examQuestionUpsertCache[key]
	examQuestionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			examQuestionAllColumns,
			examQuestionColumnsWithDefault,
			examQuestionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			examQuestionAllColumns,
			examQuestionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert exam_questions, could not build update column list")
		}

		ret := strmangle.SetComplement(examQuestionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(examQuestionPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert exam_questions, could not build conflict column list")
			}

			conflict = make([]string, len(examQuestionPrimaryKeyColumns))
			copy(conflict, examQuestionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"exam_questions\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(examQuestionType, examQuestionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(examQuestionType, examQuestionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert exam_questions")
	}

	if !cached {
		examQuestionUpsertCacheMut.Lock()
		examQuestionUpsertCache[key] = cache
		examQuestionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single ExamQuestion record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ExamQuestion) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single ExamQuestion record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ExamQuestion) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ExamQuestion provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), examQuestionPrimaryKeyMapping)
	sql := "DELETE FROM \"exam_questions\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from exam_questions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for exam_questions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q examQuestionQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q examQuestionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no examQuestionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from exam_questions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for exam_questions")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ExamQuestionSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ExamQuestionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(examQuestionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), examQuestionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"exam_questions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, examQuestionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from examQuestion slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for exam_questions")
	}

	if len(examQuestionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ExamQuestion) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no ExamQuestion provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ExamQuestion) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindExamQuestion(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ExamQuestionSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty ExamQuestionSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ExamQuestionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ExamQuestionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), examQuestionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"exam_questions\".* FROM \"exam_questions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, examQuestionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ExamQuestionSlice")
	}

	*o = slice

	return nil
}

// ExamQuestionExistsG checks if the ExamQuestion row exists.
func ExamQuestionExistsG(ctx context.Context, iD string) (bool, error) {
	return ExamQuestionExists(ctx, boil.GetContextDB(), iD)
}

// ExamQuestionExists checks if the ExamQuestion row exists.
func ExamQuestionExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"exam_questions\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if exam_questions exists")
	}

	return exists, nil
}

// Exists checks if the ExamQuestion row exists.
func (o *ExamQuestion) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ExamQuestionExists(ctx, exec, o.ID)
}

// /////////////////////////////// BEGIN EXTENSIONS /////////////////////////////////
// Expose table columns
var (
	ExamQuestionAllColumns            = examQuestionAllColumns
	ExamQuestionColumnsWithoutDefault = examQuestionColumnsWithoutDefault
	ExamQuestionColumnsWithDefault    = examQuestionColumnsWithDefault
	ExamQuestionPrimaryKeyColumns     = examQuestionPrimaryKeyColumns
	ExamQuestionGeneratedColumns      = examQuestionGeneratedColumns
)

// GetID get ID from model object
func (o *ExamQuestion) GetID() string {
	return o.ID
}

// GetIDs extract IDs from model objects
func (s ExamQuestionSlice) GetIDs() []string {
	result := make([]string, len(s))
	for i := range s {
		result[i] = s[i].ID
	}
	return result
}

// GetIntfIDs extract IDs from model objects as interface slice
func (s ExamQuestionSlice) GetIntfIDs() []interface{} {
	result := make([]interface{}, len(s))
	for i := range s {
		result[i] = s[i].ID
	}
	return result
}

// ToIDMap convert a slice of model objects to a map with ID as key
func (s ExamQuestionSlice) ToIDMap() map[string]*ExamQuestion {
	result := make(map[string]*ExamQuestion, len(s))
	for _, o := range s {
		result[o.ID] = o
	}
	return result
}

// ToUniqueItems construct a slice of unique items from the given slice
func (s ExamQuestionSlice) ToUniqueItems() ExamQuestionSlice {
	result := make(ExamQuestionSlice, 0, len(s))
	mapChk := make(map[string]struct{}, len(s))
	for i := len(s) - 1; i >= 0; i-- {
		o := s[i]
		if _, ok := mapChk[o.ID]; !ok {
			mapChk[o.ID] = struct{}{}
			result = append(result, o)
		}
	}
	return result
}

// FindItemByID find item by ID in the slice
func (s ExamQuestionSlice) FindItemByID(id string) *ExamQuestion {
	for _, o := range s {
		if o.ID == id {
			return o
		}
	}
	return nil
}

// FindMissingItemIDs find all item IDs that are not in the list
// NOTE: the input ID slice should contain unique values
func (s ExamQuestionSlice) FindMissingItemIDs(expectedIDs []string) []string {
	if len(s) == 0 {
		return expectedIDs
	}
	result := []string{}
	mapChk := s.ToIDMap()
	for _, id := range expectedIDs {
		if _, ok := mapChk[id]; !ok {
			result = append(result, id)
		}
	}
	return result
}

// InsertAll inserts all rows with the specified column values, using an executor.
// IMPORTANT: this will calculate the widest columns from all items in the slice, be careful if you want to use default column values
func (o ExamQuestionSlice) InsertAll(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	// Calculate the widest columns from all rows need to insert
	wlCols := make(map[string]struct{}, 10)
	for _, row := range o {
		wl, _ := columns.InsertColumnSet(
			examQuestionAllColumns,
			examQuestionColumnsWithDefault,
			examQuestionColumnsWithoutDefault,
			queries.NonZeroDefaultSet(examQuestionColumnsWithDefault, row),
		)
		for _, col := range wl {
			wlCols[col] = struct{}{}
		}
	}
	wl := make([]string, 0, len(wlCols))
	for _, col := range examQuestionAllColumns {
		if _, ok := wlCols[col]; ok {
			wl = append(wl, col)
		}
	}

	var sql string
	vals := []interface{}{}
	for i, row := range o {
		if !boil.TimestampsAreSkipped(ctx) {
			currTime := time.Now().In(boil.GetLocation())
			if row.CreatedAt.IsZero() {
				row.CreatedAt = currTime
			}
			if row.UpdatedAt.IsZero() {
				row.UpdatedAt = currTime
			}
		}

		if err := row.doBeforeInsertHooks(ctx, exec); err != nil {
			return 0, err
		}

		if i == 0 {
			sql = "INSERT INTO \"exam_questions\" " + "(\"" + strings.Join(wl, "\",\"") + "\")" + " VALUES "
		}
		sql += strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), len(vals)+1, len(wl))
		if i != len(o)-1 {
			sql += ","
		}
		valMapping, err := queries.BindMapping(examQuestionType, examQuestionMapping, wl)
		if err != nil {
			return 0, err
		}

		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valMapping)...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, vals)
	}

	result, err := exec.ExecContext(ctx, sql, vals...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to insert all from examQuestion slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by insertall for exam_questions")
	}

	if len(examQuestionAfterInsertHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterInsertHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// InsertIgnoreAll inserts all rows with ignoring the existing ones having the same primary key values.
// NOTE: This function calls UpsertAll() with updateOnConflict=false and conflictColumns=<primary key columns>
// IMPORTANT: this will calculate the widest columns from all items in the slice, be careful if you want to use default column values
// IMPORTANT: if the table has `id` column of auto-increment type, this may not work as expected
func (o ExamQuestionSlice) InsertIgnoreAll(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	return o.UpsertAll(ctx, exec, false, examQuestionPrimaryKeyColumns, boil.None(), columns)
}

// UpsertAll inserts or updates all rows
// Currently it doesn't support "NoContext" and "NoRowsAffected"
// IMPORTANT: this will calculate the widest columns from all items in the slice, be careful if you want to use default column values
// IMPORTANT: if the table has `id` column of auto-increment type, this may not work as expected
func (o ExamQuestionSlice) UpsertAll(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	// Calculate the widest columns from all rows need to upsert
	insertCols := make(map[string]struct{}, 10)
	for _, row := range o {
		insert, _ := insertColumns.InsertColumnSet(
			examQuestionAllColumns,
			examQuestionColumnsWithDefault,
			examQuestionColumnsWithoutDefault,
			queries.NonZeroDefaultSet(examQuestionColumnsWithDefault, row),
		)
		for _, col := range insert {
			insertCols[col] = struct{}{}
		}
	}
	insert := make([]string, 0, len(insertCols))
	for _, col := range examQuestionAllColumns {
		if _, ok := insertCols[col]; ok {
			insert = append(insert, col)
		}
	}

	update := updateColumns.UpdateColumnSet(
		examQuestionAllColumns,
		examQuestionPrimaryKeyColumns,
	)

	if updateOnConflict && len(update) == 0 {
		return 0, errors.New("models: unable to upsert exam_questions, could not build update column list")
	}

	conflict := conflictColumns
	if len(conflict) == 0 {
		conflict = make([]string, len(examQuestionPrimaryKeyColumns))
		copy(conflict, examQuestionPrimaryKeyColumns)
	}

	buf := strmangle.GetBuffer()
	defer strmangle.PutBuffer(buf)

	columns := "DEFAULT VALUES"
	if len(insert) != 0 {
		columns = fmt.Sprintf("(%s) VALUES %s",
			strings.Join(insert, ", "),
			strmangle.Placeholders(dialect.UseIndexPlaceholders, len(insert)*len(o), 1, len(insert)),
		)
	}

	fmt.Fprintf(
		buf,
		"INSERT INTO %s %s ON CONFLICT ",
		"\"exam_questions\"",
		columns,
	)

	if !updateOnConflict || len(update) == 0 {
		buf.WriteString("DO NOTHING")
	} else {
		buf.WriteByte('(')
		buf.WriteString(strings.Join(conflict, ", "))
		buf.WriteString(") DO UPDATE SET ")

		for i, v := range update {
			if i != 0 {
				buf.WriteByte(',')
			}
			quoted := strmangle.IdentQuote(dialect.LQ, dialect.RQ, v)
			buf.WriteString(quoted)
			buf.WriteString(" = EXCLUDED.")
			buf.WriteString(quoted)
		}
	}

	query := buf.String()
	valueMapping, err := queries.BindMapping(examQuestionType, examQuestionMapping, insert)
	if err != nil {
		return 0, err
	}

	var vals []interface{}
	for _, row := range o {
		if !boil.TimestampsAreSkipped(ctx) {
			currTime := time.Now().In(boil.GetLocation())
			if row.CreatedAt.IsZero() {
				row.CreatedAt = currTime
			}

			row.UpdatedAt = currTime
		}

		if err := row.doBeforeUpsertHooks(ctx, exec); err != nil {
			return 0, err
		}

		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valueMapping)...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, vals)
	}

	result, err := exec.ExecContext(ctx, query, vals...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to upsert for exam_questions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by upsert for exam_questions")
	}

	if len(examQuestionAfterUpsertHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterUpsertHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// DeleteAllByPage delete all ExamQuestion records from the slice.
// This function deletes data by pages to avoid exceeding Postgres limitation (max parameters: 65535)
func (s ExamQuestionSlice) DeleteAllByPage(ctx context.Context, exec boil.ContextExecutor, limits ...int) (int64, error) {
	length := len(s)
	if length == 0 {
		return 0, nil
	}

	// max number of parameters = 65535
	chunkSize := DefaultPageSize
	if len(limits) > 0 && limits[0] > 0 && limits[0] <= MaxPageSize {
		chunkSize = limits[0]
	}
	if length <= chunkSize {
		return s.DeleteAll(ctx, exec)
	}

	rowsAffected := int64(0)
	start := 0
	for {
		end := start + chunkSize
		if end > length {
			end = length
		}
		rows, err := s[start:end].DeleteAll(ctx, exec)
		if err != nil {
			return rowsAffected, err
		}

		rowsAffected += rows
		start = end
		if start >= length {
			break
		}
	}
	return rowsAffected, nil
}

// UpdateAllByPage update all ExamQuestion records from the slice.
// This function updates data by pages to avoid exceeding Postgres limitation (max parameters: 65535)
func (s ExamQuestionSlice) UpdateAllByPage(ctx context.Context, exec boil.ContextExecutor, cols M, limits ...int) (int64, error) {
	length := len(s)
	if length == 0 {
		return 0, nil
	}

	// max number of parameters = 65535
	// NOTE: len(cols) should not be too big
	chunkSize := DefaultPageSize
	if len(limits) > 0 && limits[0] > 0 && limits[0] <= MaxPageSize {
		chunkSize = limits[0]
	}
	if length <= chunkSize {
		return s.UpdateAll(ctx, exec, cols)
	}

	rowsAffected := int64(0)
	start := 0
	for {
		end := start + chunkSize
		if end > length {
			end = length
		}
		rows, err := s[start:end].UpdateAll(ctx, exec, cols)
		if err != nil {
			return rowsAffected, err
		}

		rowsAffected += rows
		start = end
		if start >= length {
			break
		}
	}
	return rowsAffected, nil
}

// InsertAllByPage insert all ExamQuestion records from the slice.
// This function inserts data by pages to avoid exceeding Postgres limitation (max parameters: 65535)
func (s ExamQuestionSlice) InsertAllByPage(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns, limits ...int) (int64, error) {
	length := len(s)
	if length == 0 {
		return 0, nil
	}

	// max number of parameters = 65535
	chunkSize := MaxPageSize / reflect.ValueOf(&ExamQuestionColumns).Elem().NumField()
	if len(limits) > 0 && limits[0] > 0 && limits[0] < chunkSize {
		chunkSize = limits[0]
	}
	if length <= chunkSize {
		return s.InsertAll(ctx, exec, columns)
	}

	rowsAffected := int64(0)
	start := 0
	for {
		end := start + chunkSize
		if end > length {
			end = length
		}
		rows, err := s[start:end].InsertAll(ctx, exec, columns)
		if err != nil {
			return rowsAffected, err
		}

		rowsAffected += rows
		start = end
		if start >= length {
			break
		}
	}
	return rowsAffected, nil
}

// InsertIgnoreAllByPage insert all ExamQuestion records from the slice.
// This function inserts data by pages to avoid exceeding Postgres limitation (max parameters: 65535)
func (s ExamQuestionSlice) InsertIgnoreAllByPage(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns, limits ...int) (int64, error) {
	length := len(s)
	if length == 0 {
		return 0, nil
	}

	// max number of parameters = 65535
	chunkSize := MaxPageSize / reflect.ValueOf(&ExamQuestionColumns).Elem().NumField()
	if len(limits) > 0 && limits[0] > 0 && limits[0] < chunkSize {
		chunkSize = limits[0]
	}
	if length <= chunkSize {
		return s.InsertIgnoreAll(ctx, exec, columns)
	}

	rowsAffected := int64(0)
	start := 0
	for {
		end := start + chunkSize
		if end > length {
			end = length
		}
		rows, err := s[start:end].InsertIgnoreAll(ctx, exec, columns)
		if err != nil {
			return rowsAffected, err
		}

		rowsAffected += rows
		start = end
		if start >= length {
			break
		}
	}
	return rowsAffected, nil
}

// UpsertAllByPage upsert all ExamQuestion records from the slice.
// This function upserts data by pages to avoid exceeding Postgres limitation (max parameters: 65535)
func (s ExamQuestionSlice) UpsertAllByPage(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, limits ...int) (int64, error) {
	length := len(s)
	if length == 0 {
		return 0, nil
	}

	// max number of parameters = 65535
	chunkSize := MaxPageSize / reflect.ValueOf(&ExamQuestionColumns).Elem().NumField()
	if len(limits) > 0 && limits[0] > 0 && limits[0] < chunkSize {
		chunkSize = limits[0]
	}
	if length <= chunkSize {
		return s.UpsertAll(ctx, exec, updateOnConflict, conflictColumns, updateColumns, insertColumns)
	}

	rowsAffected := int64(0)
	start := 0
	for {
		end := start + chunkSize
		if end > length {
			end = length
		}
		rows, err := s[start:end].UpsertAll(ctx, exec, updateOnConflict, conflictColumns, updateColumns, insertColumns)
		if err != nil {
			return rowsAffected, err
		}

		rowsAffected += rows
		start = end
		if start >= length {
			break
		}
	}
	return rowsAffected, nil
}

// LoadExamsByPage performs eager loading of values by page. This is for a N-1 relationship.
func (s ExamQuestionSlice) LoadExamsByPage(ctx context.Context, e boil.ContextExecutor, mods ...qm.QueryMod) error {
	return s.LoadExamsByPageEx(ctx, e, DefaultPageSize, mods...)
}
func (s ExamQuestionSlice) LoadExamsByPageEx(ctx context.Context, e boil.ContextExecutor, pageSize int, mods ...qm.QueryMod) error {
	if len(s) == 0 {
		return nil
	}
	for _, chunk := range chunkSlice[*ExamQuestion](s, pageSize) {
		if err := chunk[0].L.LoadExam(ctx, e, false, &chunk, queryMods(mods)); err != nil {
			return err
		}
	}
	return nil
}

func (s ExamQuestionSlice) GetLoadedExams() ExamSlice {
	result := make(ExamSlice, 0, len(s))
	mapCheckDup := make(map[*Exam]struct{})
	for _, item := range s {
		if item.R == nil || item.R.Exam == nil {
			continue
		}
		if _, ok := mapCheckDup[item.R.Exam]; ok {
			continue
		}
		result = append(result, item.R.Exam)
		mapCheckDup[item.R.Exam] = struct{}{}
	}
	return result
}

///////////////////////////////// END EXTENSIONS /////////////////////////////////
