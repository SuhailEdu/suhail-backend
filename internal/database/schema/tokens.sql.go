// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tokens.sql

package schema

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUserToken = `-- name: CreateUserToken :one
INSERT INTO tokens(hash , user_id , expiry , scope )
VALUES ( $1 , $2 , $3 , $4 )
RETURNING hash, user_id, expiry, scope
`

type CreateUserTokenParams struct {
	Hash   []byte
	UserID pgtype.UUID
	Expiry pgtype.Timestamp
	Scope  string
}

func (q *Queries) CreateUserToken(ctx context.Context, arg CreateUserTokenParams) (Token, error) {
	row := q.db.QueryRow(ctx, createUserToken,
		arg.Hash,
		arg.UserID,
		arg.Expiry,
		arg.Scope,
	)
	var i Token
	err := row.Scan(
		&i.Hash,
		&i.UserID,
		&i.Expiry,
		&i.Scope,
	)
	return i, err
}

const getUserByToken = `-- name: GetUserByToken :one
SELECT users.id,tokens.hash , tokens.expiry  FROM tokens INNER JOIN users ON users.id = tokens.user_id WHERE hash = $1
`

type GetUserByTokenRow struct {
	ID     pgtype.UUID
	Hash   []byte
	Expiry pgtype.Timestamp
}

func (q *Queries) GetUserByToken(ctx context.Context, hash []byte) (GetUserByTokenRow, error) {
	row := q.db.QueryRow(ctx, getUserByToken, hash)
	var i GetUserByTokenRow
	err := row.Scan(&i.ID, &i.Hash, &i.Expiry)
	return i, err
}

const getUserToken = `-- name: GetUserToken :one
SELECT hash, user_id, expiry, scope FROM tokens WHERE hash = $1
`

func (q *Queries) GetUserToken(ctx context.Context, hash []byte) (Token, error) {
	row := q.db.QueryRow(ctx, getUserToken, hash)
	var i Token
	err := row.Scan(
		&i.Hash,
		&i.UserID,
		&i.Expiry,
		&i.Scope,
	)
	return i, err
}
